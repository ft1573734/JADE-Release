

from EmbeddingModel import EmbeddingBES36 as EMBED_36
from EmbeddingModel import EmbeddingWord2Vec as W2VModel
from JADEAlgorithm import JADECore as JADE
from JADEAlgorithm import EmbeddedColumn
from tqdm import tqdm

import numpy as np
import cupy as cp

#import alive_bar

#def intersection(lst1, lst2):
#    return list(set(lst1) & set(lst2))

def hasOverlap(floor1, ceiling1, floor2, ceiling2):
    result = True
    if floor1 >= ceiling2 or floor2 >= ceiling1:
        result = False
    return result

def Filter(SimThreshold, target, Leaf_index):
    #print(f"Processing column {column.Index}")
    distThreshold = 1-SimThreshold
    #if max(cp.abs(target.apls - column.apls)) > distthreshold:
     #   return []
    #else:
     #   return column 
    tmpLeafIndexDim = Leaf_index[0].Index_Index
    #print(f"Filtering index dim {tmpLeafIndexDim}")
    tmpAPL = target.APLs[tmpLeafIndexDim]
    result = []
    for leaf_node in Leaf_index:
        APLFilterRangeFloor = max(0, tmpAPL-distThreshold)
        APLFilterRangeCeiling = min(1, tmpAPL+distThreshold)
        if hasOverlap(APLFilterRangeFloor, APLFilterRangeCeiling, leaf_node.floor, leaf_node.ceiling):
        #if APLFilterRangeFloor <= leaf_node.ceiling and leaf_node.floor <= APLFilterRangeCeiling:
            for col in leaf_node.columns:
                result.append(col)
    return result



def master():
    print("JADEAlgMain")

    #DatasetInColumns & TargetColumns are lists, each element represents a column.
    DatasetInColumns = []
    TargetColumns = []

    #The embedded columns will be generated by JADE
    EmbeddedColumns = []


    THRESHOLD = 0.8 #only columns whose Jaccard similarity >= t are joinable


    #===Pre-processing===#
    print("-------JADE: Preparing Vectorized Dataset------")
    EmbeddingModel = EMBED_36
    EmbedDim = EmbeddingModel.Dimensionality
    JADE_ALG = JADE(EmbeddingModel())
    APLs_Matrix = cp.ndarray(shape = (len(DatasetInColumns), EmbedDim),dtype = float)
    for i in tqdm(range(0,len(DatasetInColumns))):
        column = DatasetInColumns[i]
        embeddedColumn = EmbeddedColumn()
        V2Matrix = JADE_ALG.GenerateV2Matrix(column)
        APLs = JADE_ALG.CalculateAPL(V2Matrix)
        embeddedColumn.Index = i
        embeddedColumn.V2Matrix = V2Matrix
        embeddedColumn.APLs = APLs
        embeddedColumn.OriginalColumn = column
        embeddedColumn.length = len(column)
        EmbeddedColumns.append(embeddedColumn)

        APLs_Matrix[i,:] = cp.array(APLs, dtype=float)


    for targetColumn in TargetColumns:

        targetColumn_V2 = JADE_ALG.GenerateV2Matrix(targetColumn)
        targetColumn_APL = JADE_ALG.CalculateAPL(targetColumn_V2)
        EmbeddedTargetColumn = EmbeddedColumn()

        EmbeddedTargetColumn.Index = targetColumnIndex
        EmbeddedTargetColumn.OriginalColumn = targetColumn
        EmbeddedTargetColumn.V2Matrix = targetColumn_V2
        EmbeddedTargetColumn.APLs = targetColumn_APL
        EmbeddedTargetColumn.length = len(targetColumn)


        print(f"Filtering for column {targetColumnIndex}")
        targetColumnIndex += 1


        #===Filtering Phase===#
        candidates = []
        candidate_array = JADE.FilterViaAPLMatrix(targetColumn_APL, APLs_Matrix, DistThreshold)
        for i in range(0,len(candidate_array)):
            if candidate_array[int(i)] == 1:
                candidates.append(EmbeddedColumns[int(i)])


        #===GEMM Phase===#
        AllResults = []
        if len(candidates) > 0:
            joinableCols = []
            result = JADE_ALG.ConcatenateDataset(candidates)
            concatenatedCandidateColumns = result[0]
            maps = result[1]
            columnIndices = result[2]
            sims = JADE_ALG.CalculateJaccardSimilarityUsingConcatenatedV2Matrices(EmbeddedTargetColumn, concatenatedCandidateColumns, maps, columnIndices)
            for j in range(0,len(sims)):
                if sims[j] >= THRESHOLD:
                    joinableCols.append(candidates[j].Index)
            AllResults.append(joinableCols)
 

    print(f"===JADEII algorithm finished")
    for i in range(0, len(AllResults)):
        print(f"Target column {i}'s joinable columns with similarity threshold > {THRESHOLD}: {AllResults[i]}")


if __name__ == "__main__":
    master()
